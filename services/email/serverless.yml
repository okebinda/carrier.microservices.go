# Email Microservice
#  using Serverless framework

service: carrier-email
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '2'

# enable v3 env variable handling while using v2
# @todo: remove once upgraded to v3
useDotenv: true

# enable v3 configuration validation while using v2
# @todo: remove once upgraded to v3
configValidationMode: error

plugins:
  - serverless-dynamodb-local

# custom variables - you should change these to your own values
custom:
  region: ${env:REGION, "us-east-1"}
  domain: ${env:DOMAIN, "domain.com"}
  prefix: ${env:PREFIX, "aws-com-domain"}
  logLevel: ${env:LOG_LEVEL, "error"}
  logEncoding: ${env:LOG_ENCODING, "json"}
  apiKey: ${env:API_KEY, ""}
  dynamoDBEndpoint: ${env:DYNAMODB_ENDPOINT, ""}
  sparkPostAPIKey: ${env:SPARKPOST_API_KEY, ""}
  sparkPostBaseURL: ${env:SPARKPOST_BASE_URL, "https://api.sparkpost.com"}
  sparkPostAPIVersion: ${env:SPARKPOST_API_VERSION, "1"}
  tableReadCapacityUnits: ${env:TABLE_READ_CAPACITY_UINTS, "1"}
  tableWriteCapacityUnits: ${env:TABLE_WRITE_CAPACITY_UINTS, "1"}
  indexReadCapacityUnits: ${env:INDEX_READ_CAPACITY_UINTS, "1"}
  indexWriteCapacityUnits: ${env:INDEX_WRITE_CAPACITY_UINTS, "1"}
  dynamodb:
    stages:
      - dev

provider:
  name: aws
  region: ${self:custom.region}
  runtime: go1.x
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: code.${self:custom.domain}
  
  # enable v3 API gateway naming convention
  # @todo: remove once upgraded to v3
  apiGateway:
    shouldStartNameWithService: true
  
  # IAM
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ emailsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - !Sub
          - "${TableARN}/index/*"
          - TableARN: !GetAtt [ emailsTable, Arn ]

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  email:
    handler: bin/email
    events:
      - http:
          path: /emails
          method: get
      - http:
          path: /emails
          method: post
      - http:
          path: /email/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /email/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /email/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      LOG_LEVEL: ${self:custom.logLevel}
      LOG_ENCODING: ${self:custom.logEncoding}
      API_KEY: ${self:custom.apiKey}
      DYNAMODB_ENDPOINT: ${self:custom.dynamoDBEndpoint}
      EMAILS_TABLE: ${self:custom.prefix}-${opt:stage,'dev'}-dt-emails
      EMAIL_QUEUE_INDEX: ${self:custom.prefix}-${opt:stage,'dev'}-dt-emails-queue-idx
      SPARKPOST_API_KEY: ${self:custom.sparkPostAPIKey}
      SPARKPOST_BASE_URL: ${self:custom.sparkPostBaseURL}
      SPARKPOST_API_VERSION: ${self:custom.sparkPostAPIVersion}

resources:
  Resources:
    emailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-${opt:stage,'dev'}-dt-emails
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: B
          - AttributeName: send_status
            AttributeType: N
          - AttributeName: 'priority_queued'
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableReadCapacityUnits}
          WriteCapacityUnits: ${self:custom.tableWriteCapacityUnits}
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.prefix}-${opt:stage,'dev'}-dt-emails-queue-idx
            KeySchema:
              - AttributeName: send_status
                KeyType: HASH
              - AttributeName: 'priority_queued'
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.indexReadCapacityUnits}
              WriteCapacityUnits: ${self:custom.indexWriteCapacityUnits}
